"""
    energy_per_site_lswt_correction(swt::SpinWaveTheory; opts...)

Computes the [ùí™(1/Œª) or ùí™(1/S)] correction to the classical energy **per
site** [ùí™(Œª¬≤) or ùí™(S¬≤)] given a [`SpinWaveTheory`](@ref). The correction
[ùí™(Œª) or ùí™(S)] includes a uniform term (For instance, if the classical energy
is Œ±JS¬≤, the LSWT gives a correction like Œ±JS) and the summation over the
zero-point energy for all spin-wave modes, i.e., 1/2 ‚àë‚Çô ‚à´d¬≥q œâ(q, n), where q
belongs to the first magnetic Brillouin zone and n is the band index.

A keyword argument `rtol`, `atol`, or `maxevals` is required to control the
accuracy of momentum-space integration. See the HCubature package documentation
for details.
"""
function energy_per_site_lswt_correction(swt::SpinWaveTheory; opts...)
    any(in(keys(opts)), (:rtol, :atol, :maxevals)) || error("Must specify one of `rtol`, `atol`, or `maxevals` to control momentum-space integration.")

    Natoms = natoms(swt.sys.crystal)
    L = nbands(swt)
    H = zeros(ComplexF64, 2L, 2L)
    V = zeros(ComplexF64, 2L, 2L)

    # The uniform correction to the classical energy (trace of the (1,1)-block
    # of the spin-wave Hamiltonian)
    dynamical_matrix!(H, swt, zero(Vec3))
    Œ¥E‚ÇÅ = -real(tr(view(H, 1:L, 1:L))) / 2Natoms
    @show Œ¥E‚ÇÅ

    # Integrate zero-point energy over the first Brillouin zone ùê™ ‚àà [0, 1]¬≥ for
    # magnetic cell in reshaped RLU
    Œ¥E‚ÇÇ = hcubature((0,0,0), (1,1,1); opts...) do q_reshaped
        dynamical_matrix!(H, swt, q_reshaped)
        œâs = bogoliubov!(V, H)
        return sum(view(œâs, 1:L)) / 2Natoms
    end

    @show Œ¥E‚ÇÇ[1]

    # Error bars in Œ¥E‚ÇÇ[2] are discarded
    return Œ¥E‚ÇÅ + Œ¥E‚ÇÇ[1]
end

# Calculates the magnetization reduction for :SUN mode for all atoms
function magnetization_lswt_correction_sun(swt::SpinWaveTheory; opts...)
    (; sys, data) = swt

    N = sys.Ns[1]
    Natoms = natoms(sys.crystal)
    L = (N - 1) * Natoms

    H = zeros(ComplexF64, 2L, 2L)
    V = zeros(ComplexF64, 2L, 2L)

    # Construct angular momentum operators O = n‚ãÖS aligned with quantization
    # axis.
    S = spin_matrices_of_dim(; N)
    O = zeros(ComplexF64, N, N, Natoms)
    for i in 1:Natoms
        n = normalize(swt.sys.dipoles[i])
        U = data.local_unitaries[i]
        O[:, :, i] += U' * (n' * S) * U
        @assert O[N, N, i] ‚âà norm(swt.sys.dipoles[i])
    end

    Œ¥S = hcubature((0,0,0), (1,1,1); opts...) do q
        swt_hamiltonian_SUN!(H, swt, q)
        bogoliubov!(V, H)
        ret = zeros(Natoms)
        for band in L+1:2L
            v = reshape(view(V, :, band), N-1, Natoms, 2)
            for i in 1:Natoms, Œ± in 1:N-1, Œ≤ in 1:N-1
                ret[i] -= real((O[N, N, i]*Œ¥(Œ±, Œ≤) - O[Œ±, Œ≤, i]) * conj(v[Œ±, i, 1]) * v[Œ≤, i, 1])
            end
        end
        return SVector{Natoms}(ret)
    end

    # Error bars in Œ¥S[2] are discarded
    return Œ¥S[1]
end

# Calculates the magnetization reduction for :dipole mode for every site
function magnetization_lswt_correction_dipole(swt::SpinWaveTheory; opts...)
    L = nbands(swt)
    H = zeros(ComplexF64, 2L, 2L)
    V = zeros(ComplexF64, 2L, 2L)

    Œ¥S = hcubature((0,0,0), (1,1,1); opts...) do q
        swt_hamiltonian_dipole!(H, swt, Vec3(q))
        bogoliubov!(V, H)
        return SVector{L}(-norm2(view(V, L+i, 1:L)) for i in 1:L)
    end

    # Error bars in Œ¥S[2] are discarded
    return Œ¥S[1]
end

"""
    magnetization_lswt_correction(swt::SpinWaveTheory; opts...)

Calculates the reduction in the classical dipole magnitude for all atoms in the
magnetic cell. In the case of `:dipole` and `:dipole_uncorrected` mode, the
classical dipole magnitude is constrained to spin-`s`. While in `:SUN` mode, the
classical dipole magnitude can be smaller than `s` due to anisotropic
interactions.

A keyword argument `rtol`, `atol`, or `maxevals` is required to control the
accuracy of momentum-space integration. See the HCubature package documentation
for details.
"""
function magnetization_lswt_correction(swt::SpinWaveTheory; opts...)
    any(in(keys(opts)), (:rtol, :atol, :maxevals)) || error("Must specify one of `rtol`, `atol`, or `maxevals` to control momentum-space integration.")

    (; sys) = swt
    if sys.mode == :SUN
        Œ¥S = magnetization_lswt_correction_sun(swt; opts...)
    else
        @assert sys.mode in (:dipole, :dipole_uncorrected)
        Œ¥S = magnetization_lswt_correction_dipole(swt; opts...)
    end
    return Œ¥S
end
